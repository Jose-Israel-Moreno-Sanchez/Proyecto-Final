/**
 * 游늬 CONTROLADOR: estadisticas.controller.js
 * 游닍 M칩dulo: Gesti칩n de estad칤sticas de la tienda
 *
 * 游꿢 Funcionalidades:
 *   - Obtener estad칤sticas generales de ventas.
 *   - Obtener estad칤sticas de productos m치s vendidos.
 *   - Calcular estad칤sticas personalizadas seg칰n fechas.
 *
 * 游눹 Este archivo contiene las funciones que gestionan las estad칤sticas
 * relacionadas con ventas, productos y otros an치lisis espec칤ficos del sistema.
 * 
 * 游뚿 Aseg칰rese de que las dependencias necesarias est칠n instaladas y que 
 * los modelos asociados (Producto, Pedido) est칠n correctamente definidos.
 * 
 * 游늭 Modelos utilizados:
 *   - estadisticas.model.js
 * 
 * 游늵 Consultas y c치lculos realizados en este controlador:
 *   - Conteo de ventas completadas.
 *   - Suma de productos vendidos y generaci칩n de ingresos.
 *   - Consultas por rango de fechas.
 * 
 * 游댏 Requiere permisos de lectura de estad칤sticas para los usuarios.
 */

const estadisticasModel = require('../models/estadisticas.model'); // Modelo para las estad칤sticas

/**
 * 游닇 Funci칩n: obtenerEstadisticasVentas
 * 游댳 Descripci칩n:
 *   Obtiene las estad칤sticas generales de ventas, incluyendo la cantidad total 
 *   de ventas, los productos vendidos y los ingresos totales generados.
 * 
 * 游댃 Proceso:
 *   - Llama al modelo para obtener las ventas completadas, productos vendidos, e ingresos totales.
 * 
 * 游닍 Respuesta esperada:
 *   - ventasTotales: N칰mero total de ventas completadas.
 *   - productosVendidos: N칰mero total de productos vendidos.
 *   - ingresosTotales: Suma total de los ingresos generados.
 */
module.exports.obtenerEstadisticasVentas = async (req, res) => {
  try {
    // Llamar al modelo para obtener las estad칤sticas generales de ventas
    const ventasTotales = await estadisticasModel.contarPedidos();
    const productosVendidos = await estadisticasModel.contarProductosPublicados();
    const ingresosTotales = await estadisticasModel.calcularTotalIngresos();

    // Responder con las estad칤sticas generales
    res.status(200).json({
      ventasTotales,
      productosVendidos,
      ingresosTotales,
    });
  } catch (error) {
    console.error('Error al obtener estad칤sticas de ventas:', error);
    res.status(500).json({ mensaje: 'Error al obtener estad칤sticas de ventas' });
  }
};

/**
 * 游닇 Funci칩n: obtenerIngresosMensuales
 * 游댳 Descripci칩n:
 *   Obtiene los ingresos agrupados por mes durante los 칰ltimos 6 meses.
 * 
 * 游댃 Proceso:
 *   - Llama al modelo para obtener los ingresos mensuales agrupados.
 * 
 * 游닍 Respuesta esperada:
 *   - ingresosMensuales: Lista de ingresos por cada mes de los 칰ltimos 6 meses.
 */
module.exports.obtenerIngresosMensuales = async (req, res) => {
  try {
    // Llamar al modelo para obtener los ingresos agrupados por mes (칰ltimos 6 meses)
    const ingresosMensuales = await estadisticasModel.obtenerIngresosPorMes();

    // Responder con los ingresos mensuales
    res.status(200).json({
      ingresosMensuales,
    });
  } catch (error) {
    console.error('Error al obtener los ingresos mensuales:', error);
    res.status(500).json({ mensaje: 'Error al obtener los ingresos mensuales' });
  }
};

/**
 * 游닇 Funci칩n: obtenerTopProductosVendidos
 * 游댳 Descripci칩n:
 *   Obtiene las estad칤sticas de los productos m치s vendidos en el sistema.
 *   Se ordena por la cantidad de productos vendidos, mostrando los m치s vendidos.
 * 
 * 游댃 Proceso:
 *   - Llama al modelo para obtener los productos m치s vendidos.
 *   - Limita el resultado a los 5 productos m치s vendidos.
 * 
 * 游닍 Respuesta esperada:
 *   - productos: Lista de los productos m치s vendidos con su nombre, precio y cantidad vendida.
 */
module.exports.obtenerTopProductosVendidos = async (req, res) => {
  try {
    // Llamar al modelo para obtener los productos m치s vendidos
    const productos = await estadisticasModel.obtenerTopProductosVendidos();

    // Responder con la lista de productos m치s vendidos
    res.status(200).json({
      productos,
    });
  } catch (error) {
    console.error('Error al obtener estad칤sticas de productos:', error);
    res.status(500).json({ mensaje: 'Error al obtener estad칤sticas de productos' });
  }
};

/**
 * 游닇 Funci칩n: calcularEstadisticasPersonalizadas
 * 游댳 Descripci칩n:
 *   Realiza c치lculos de estad칤sticas personalizadas seg칰n las fechas proporcionadas.
 *   Esta funci칩n permite realizar an치lisis de ventas dentro de un rango de fechas.
 * 
 * 游댃 Proceso:
 *   - Valida las fechas proporcionadas.
 *   - Llama al modelo para obtener las ventas totales dentro de ese rango de fechas.
 *   - Puede incluir c치lculos adicionales si es necesario.
 * 
 * 游닍 Respuesta esperada:
 *   - ventasEnRango: Total de ingresos generados dentro del rango de fechas.
 *   - otrasEstadisticas: Cualquier otra estad칤stica personalizada calculada (si se usa alguna utilidad).
 */
module.exports.calcularEstadisticasPersonalizadas = async (req, res) => {
  try {
    const { fechaInicio, fechaFin } = req.query;  // Extraer fechas del query string

    // Validar las fechas
    if (!fechaInicio || !fechaFin) {
      return res.status(400).json({ mensaje: 'Se requieren las fechas de inicio y fin.' });
    }

    // Validaci칩n de fechas (Asegurarse de que las fechas son v치lidas)
    const fechaInicioValida = Date.parse(fechaInicio);
    const fechaFinValida = Date.parse(fechaFin);

    if (isNaN(fechaInicioValida) || isNaN(fechaFinValida)) {
      return res.status(400).json({ mensaje: 'Las fechas proporcionadas no son v치lidas.' });
    }

    if (fechaFinValida < fechaInicioValida) {
      return res.status(400).json({ mensaje: 'La fecha de fin no puede ser anterior a la fecha de inicio.' });
    }

    // Llamar al modelo para obtener las ventas dentro del rango de fechas
    const ventasEnRango = await estadisticasModel.obtenerIngresosMensuales();

    // Responder con los resultados calculados
    res.status(200).json({
      ventasEnRango,
    });
  } catch (error) {
    console.error('Error al calcular estad칤sticas personalizadas:', error);
    res.status(500).json({ mensaje: 'Error al calcular estad칤sticas personalizadas' });
  }
};
